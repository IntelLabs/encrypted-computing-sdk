import io

from .decorators import *
from . import constants
from .config import GlobalConfig

class RunConfig:
    """
    Configuration class for running the assembler with specific settings.

    This class manages configuration settings such as memory sizes, replacement
    policies, and other options that affect the behavior of the assembler.
    """

    __initialized = False # Specifies whether static members have been initialized
    __default_config = {} # Dictionary of all configuration items supported and their default values

    def __init__(self,
                 **kwargs):
        """
        Constructs a new RunConfig object from input parameters.

        Args:
            hbm_size (int, optional):
                Optional HBM size in KB. Defaults to `RunConfig.DEFAULT_HBM_SIZE_KB`.

            spad_size (int, optional):
                Optional scratchpad size in KB. Defaults to `RunConfig.DEFAULT_SPAD_SIZE_KB`.

            repl_policy (str, optional):
                Optional replacement policy. This should be one of `constants.Constants.REPLACEMENT_POLICIES`.
                Defaults to `RunConfig.DEFAULT_REPL_POLICY`.

            suppress_comments (bool, optional):
                If true, no comments will be emitted in the output generated by the assembler.
                Defaults to GlobalConfig.suppressComments (`False`).

            use_hbm_placeholders (bool, optional):
                [DEPRECATED]/[UNUSED] Specifies whether to use placeholders (names) for variable locations in HBM (`True`)
                or the actual variable locations (`False`). Defaults to GlobalConfig.useHBMPlaceHolders (`True`).

            use_xinstfetch (bool, optional):
                Specifies whether `xinstfetch` instructions should be generated in the CInstQ (`True`) or not (`False`).
                When no `xinstfetch` instructions are added, it is assumed that the HERACLES automated mechanism for `xinstfetch` will be activated.
                Defaults to GlobalConfig.useXInstFetch (`True`).

            debug_verbose (int, optional):
                If greater than 0, debug prints will occur. Its value indicates how often to print within loops
                (every `debugVerbose` iterations). Defaults to GlobalConfig.debugVerbose (`0`).

        Raises:
            ValueError: If at least one of the arguments passed is invalid.
        """

        # Initialize class members
        for config_name, default_value in self.__default_config.items():
            setattr(self, config_name, kwargs.get(config_name, default_value))

        # Validate inputs
        if self.repl_policy not in constants.Constants.REPLACEMENT_POLICIES:
            raise ValueError('Invalid `repl_policy`. "{}" not in {}'.format(self.repl_policy,
                                                                            constants.Constants.REPLACEMENT_POLICIES))
    @classproperty
    def DEFAULT_HBM_SIZE_KB(cls) -> int:
        return int(constants.MemoryModel.HBM.MAX_CAPACITY / constants.Constants.KILOBYTE)

    @classproperty
    def DEFAULT_SPAD_SIZE_KB(cls) -> int:
        return int(constants.MemoryModel.SPAD.MAX_CAPACITY / constants.Constants.KILOBYTE)

    @classproperty
    def DEFAULT_REPL_POLICY(cls) -> int:
        return constants.Constants.REPLACEMENT_POLICY_FTBU

    @classmethod
    def init_static(cls):
        """
        Initializes static members of the RunConfig class.

        This method sets up default configuration values for the class, ensuring
        that they are only initialized once.
        """
        if not cls.__initialized:
            cls.__default_config["hbm_size"]             = cls.DEFAULT_HBM_SIZE_KB
            cls.__default_config["spad_size"]            = cls.DEFAULT_SPAD_SIZE_KB
            cls.__default_config["repl_policy"]          = cls.DEFAULT_REPL_POLICY
            cls.__default_config["suppress_comments"]    = GlobalConfig.suppressComments
            #cls.__default_config["use_hbm_placeholders"] = GlobalConfig.useHBMPlaceHolders
            cls.__default_config["use_xinstfetch"]       = GlobalConfig.useXInstFetch
            cls.__default_config["debug_verbose"]        = GlobalConfig.debugVerbose

            cls.__initialized = True

    def __str__(self):
        """
        Returns a string representation of the configuration.

        This method provides a human-readable format of the current configuration
        settings, listing each configuration item and its value.
        """
        self_dict = self.as_dict()
        with io.StringIO() as retval_f:
            for key, value in self_dict.items():
                print("{}: {}".format(key, value), file=retval_f)
            retval = retval_f.getvalue()
        return retval

    def as_dict(self) -> dict:
        """
        Converts the configuration to a dictionary.

        Returns:
            dict: A dictionary representation of the current configuration settings.
        """
        tmp_self_dict = vars(self)
        return { config_name: tmp_self_dict[config_name] for config_name in self.__default_config }
